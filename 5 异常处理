1 java的异常处理
在java程序中，当异常情况发生时，会创建一个代表该异常的对象，而且在错误出现的地方将这个异常抛出；
异常分两种：一、由运行时系统自动产生的异常；二、由用户代码用throw语句产生的异常。
1.1 异常的处理机制
通常异常处理的语句块：
try{
    可能产生错误需要被监视的语句序列
}catch(异常类型1 对象名){
    处理该异常类型的语句序列
}catch(异常类型2 对象名){
    处理该异常类型的语句序列
}
.....
catch(异常类型n 对象名){
    ....
}finally{
    资源保护语句序列
}
（1）try语句时必须的；
（2）catch和finally语句至少要存在其中的一条；
1.2 java异常的分类
java异常可分为运行时异常（非检测异常）、检查型异常（非运行时异常）以及自定义异常。
1.2.1运行时异常
大多数是由于程序设计不当而引发的错误，这种错误要在运行期间才会发生和被发现。
如果发生了这类异常，系统可以自动进行处理，并给出提示信息，程序员需要根据这些信息来改进程序。
1.2.2检测型异常
除了运行时异常外，其余的异常均为检查型异常；编译器在编译时会进行检查，一旦发现某些语句使得此类异常有产生的“可能”，就强制要求用户处理这类异常，否则不能通
过编译。
1.2.3自定义异常
如果系统定义的异常不能满足用户的需求，用户也可以自己定义异常；自定义异常是为了表示应用程序的一些错误类型，为代码可能发生的一个或多个问题提供了新含义。
1.2.4 java异常处理的原则
有以下几点：
（1）尽可能地处理异常：如果条件确实不允许，无法在自己的代码完成处理，就考虑声明异常。
（2）具体问题具体解决：为了充分利用异常处理能力，需要为特定类型的问题构建特定的处理器块。
（3）记录可能影响应用程序运行的异常。
（4）根据情形将异常转化为业务上下文：无论何时将异常传到不同的上下文（即另一技术层），都应将异常转换为对新上下文有意义的形式。

2 java异常处理实践
注意：
一个try块可能有对个catch块，有多个catch时执行第一个匹配块。
可以嵌套try-cathc-finally结构。
在try-catch-finally结构中，可重新抛出异常。
2.1异常的抛出
被抛出的异常对象，即可以是系统定义的异常类，也可以是用户自定义的新的异常类；
抛出异常的一般格式如下：
throw 异常对象名； 或者   throw new 异常类名();
一个方法中如果使用throw语句抛出异常，要么自己捕获它，要么声明抛出了一个异常；声明抛出了异常，需要用throws关键字在方法的头部声明，格式如下：
[修饰符][返回类型] 方法名 （参数表） throws 异常类名1[,异常类名2[,....]]
2.2 异常的嵌套处理
一个try-catch-finally可以嵌套在另一个try语句块的try、catch或finally部分。
2.3 自定义异常及其处理方法
java要求自己定义的异常类必须是Throwable的直接或间接子类；
定义异常类和定义普通类并没有本质上的区别，它们也会自动继承父类中可以继承的方法和属性；一般情况下，它需要声明两个构造方法：一个是不带参数的方法，一个是
以字符串为参数，作为本异常类的具体信息。
